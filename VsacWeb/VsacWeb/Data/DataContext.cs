//using Microsoft.AspNetCore.Http;
//using Microsoft.AspNetCore.Identity;
//using Microsoft.EntityFrameworkCore;
//using Microsoft.EntityFrameworkCore.ChangeTracking;
//using Newtonsoft.Json;
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Security.Claims;
//using System.Threading;
//using System.Threading.Tasks;
//using VsacWeb.Models;
//using VsacWeb.Models.Mapping;

//namespace VsacWeb.Data
//{
//    public class DataContext : DbContext
//    {
//        private IHttpContextAccessor _httpContextAccessor;

//        public DataContext(DbContextOptions<DataContext> options, IHttpContextAccessor httpContextAccessor)
//            : base(options)
//        {
//            _httpContextAccessor = httpContextAccessor;

//        }

//        //public DbSet<Carro> Carros { get; set; }

//        // public DbSet<Animal> Animais { get; set; }


//        //public DbSet<Pessoa> Pessoas { get; set; }


//        //public DbSet<Carro> Residencias { get; set; }

//        //public DbSet<PessoaCarro> PessoaCarro { get; set; }

//        public DbSet<Log> Logs { get; set; }



//        public DbSet<UsuarioUrls> UsuarioUrls { get; set; }

//        public DbSet<Url> Urls { get; set; }

//        public DbSet<RaizUrl> RaizUrls { get; set; } 
//        protected override void OnModelCreating(ModelBuilder modelBuilder)
//        {


//            //  modelBuilder.ApplyConfiguration(new CarroMap());
//            //modelBuilder.ApplyConfiguration(new PessoaMap());
//            //            modelBuilder.ApplyConfiguration(new ResidenciaMap());
//            //modelBuilder.ApplyConfiguration(new AnimalMap());

//            //modelBuilder.ApplyConfiguration(new PessoaCarroMap());
//            //modelBuilder.ApplyConfiguration(new PessoaResidenciaMap());
//            // modelBuilder.ApplyConfiguration(new PessoaAnimalMap());
//            modelBuilder.ApplyConfiguration(new LogMap());
//            //   modelBuilder.ApplyConfiguration(new PerfilPessoaMap());

//            //   modelBuilder.ApplyConfiguration(new UrlMap());
//            // modelBuilder.ApplyConfiguration(new UsuariosUrlsMap());

//            modelBuilder.ApplyConfiguration(new RaizUrlMap());

//        }


//        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            var auditEntries = OnBeforeSaveChanges();
//            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
//            await OnAfterSaveChanges(auditEntries);
//            return result;
//        }

//        private List<AuditEntry> OnBeforeSaveChanges()
//        {
//            ChangeTracker.DetectChanges();
//            var auditEntries = new List<AuditEntry>();
//            foreach (var entry in ChangeTracker.Entries())
//            {
//                if (entry.Entity is Log || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
//                    continue;

//                var auditEntry = new AuditEntry(entry, _httpContextAccessor);
//                auditEntry.TableName = entry.Metadata.GetTableName();
//                auditEntries.Add(auditEntry);

//                foreach (var property in entry.Properties)
//                {
//                    if (property.IsTemporary)
//                    {
//                        // value will be generated by the database, get the value after saving
//                        auditEntry.TemporaryProperties.Add(property);
//                        continue;
//                    }

//                    string propertyName = property.Metadata.Name;
//                    //if (property.Metadata.IsPrimaryKey())
//                    //{
//                    //    auditEntry.KeyValues[propertyName] = property.CurrentValue;
//                    //    continue;
//                    //}

//                    switch (entry.State)
//                    {
//                        //Pegar a opertação
//                        case EntityState.Added:
//                            auditEntry.Operacao = "Adição";
//                            auditEntry.NewValues[propertyName] = property.CurrentValue;
//                            break;

//                        case EntityState.Deleted:
//                            auditEntry.Operacao = "Exclusão";
//                            auditEntry.OldValues[propertyName] = property.OriginalValue;
//                            break;

//                        case EntityState.Modified:
//                            auditEntry.Operacao = "Atualização";
//                            if (property.IsModified)
//                            {
//                                auditEntry.OldValues[propertyName] = property.OriginalValue;
//                                auditEntry.NewValues[propertyName] = property.CurrentValue;
//                            }
//                            break;
//                    }
//                }
//            }

//            // Save audit entities that have all the modifications
//            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
//            {
//                Logs.Add(auditEntry.ToLog());
//            }

//            // keep a list of entries where the value of some properties are unknown at this step
//            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
//        }

//        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
//        {
//            if (auditEntries == null || auditEntries.Count == 0)
//                return Task.CompletedTask;


//            foreach (var auditEntry in auditEntries)
//            {
//                // Get the final value of the temporary properties
//                foreach (var prop in auditEntry.TemporaryProperties)
//                {
//                    if (prop.Metadata.IsPrimaryKey())
//                    {
//                        // auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
//                    }
//                    else
//                    {
//                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
//                    }
//                }

//                // Save the Audit entry
//                Logs.Add(auditEntry.ToLog());
//            }

//            return SaveChangesAsync();
//        }

//    }

//    //public class AuditEntry
//    //{
      

//    //  //  private readonly UserManager<AppUser> _userManager;
//    //    private IHttpContextAccessor _httpContextAccessor;

    

//    //    public AuditEntry(EntityEntry entry, IHttpContextAccessor httpContextAccessor)
//    //    {
//    //        Entry = entry;
           
//    //        _httpContextAccessor = httpContextAccessor;
//    //    }


//    //    public EntityEntry Entry { get; }
//    //    public string TableName { get; set; }
//    //    // public Dictionary<string, object> KeyValues { get; } = new Dictionary<string, object>();
//    //    public string Operacao { get; set; }
//    //    public Dictionary<string, object> OldValues { get; } = new Dictionary<string, object>();
//    //    public Dictionary<string, object> NewValues { get; } = new Dictionary<string, object>();
//    //    public List<PropertyEntry> TemporaryProperties { get; } = new List<PropertyEntry>();

//    //    public bool HasTemporaryProperties => TemporaryProperties.Any();

//    //    public Log ToLog()
//    //    {
            
//    //        var log = new Log();
//    //        log.Tabela = TableName;
//    //        log.Data = DateTime.UtcNow;
//    //        log.Operacao = Operacao;
//    //        log.ValorAntigo = OldValues.Count == 0 ? null : JsonConvert.SerializeObject(OldValues);
//    //        log.ValorNovo = NewValues.Count == 0 ? null : JsonConvert.SerializeObject(NewValues);


//    //        log.AppUserId = _httpContextAccessor.HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);

//    //        return log;
//    //    }
//    //}
//}
