using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Newtonsoft.Json;
using VsacWeb.Models;
using VsacWeb.Models.Mapping;

namespace VsacWeb.Data
{

    public partial class ApplicationDbContext : IdentityDbContext<AppUser>
    {
        DbContextOptions options;
        private IHttpContextAccessor _httpContextAccessor;

       
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options, 
            IHttpContextAccessor httpContextAccessor)
            : base(options)
        {
            _httpContextAccessor = httpContextAccessor; 
            this.options = options;
        }

        public DbSet<VsacWeb.Models.Url> Url { get; set; }
        public DbSet<VsacWeb.Models.UsuarioUrls> UsuarioUrls { get; set; }

        public DbSet<Log> Logs { get; set; }
       // public DbSet<AppUser> AppUsers { get; set; }

        public DbSet<Veiculo> Carros { get; set; }

        public DbSet<Animal> Animais { get; set; }


        public DbSet<Pessoa> Pessoas { get; set; }

        public DbSet<Local> Locais { get; set; }

        public DbSet<TipoLocal> TipoLocais { get; set; }

        //public DbSet<Carro> Residencias { get; set; }

        //public DbSet<PessoaCarro> PessoaCarro { get; set; }

        public DbSet<Url> Urls { get; set; }

        public DbSet<VsacWeb.Models.RaizUrl> RaizUrl { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

         //   modelBuilder.ApplyConfiguration(new AppUserMap());
            modelBuilder.ApplyConfiguration(new VeiculoMap());
            modelBuilder.ApplyConfiguration(new PessoaMap());
            modelBuilder.ApplyConfiguration(new LocalMap());

            modelBuilder.ApplyConfiguration(new TipoLocalMap());
            modelBuilder.ApplyConfiguration(new AnimalMap());

            modelBuilder.ApplyConfiguration(new PessoaVeiculoMap());
           // modelBuilder.ApplyConfiguration(new PessoaLocalMap());
            modelBuilder.ApplyConfiguration(new PessoaAnimalMap());
            
            modelBuilder.ApplyConfiguration(new LogMap());
            modelBuilder.ApplyConfiguration(new PerfilPessoaMap());

            modelBuilder.ApplyConfiguration(new UrlMap());
            modelBuilder.ApplyConfiguration(new UsuariosUrlsMap());

            modelBuilder.ApplyConfiguration(new RaizUrlMap());

        }


        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }


        private List<AuditEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Log || entry.Entity is AppUser|| entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry, _httpContextAccessor);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    //if (property.Metadata.IsPrimaryKey())
                    //{
                    //    auditEntry.KeyValues[propertyName] = property.CurrentValue;
                    //    continue;
                    //}

                    switch (entry.State)
                    {
                        //Pegar a opertação
                        case EntityState.Added:
                            auditEntry.Operacao = "Adição";
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.Operacao = "Exclusão";
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            auditEntry.Operacao = "Atualização";
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Logs.Add(auditEntry.ToLog());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;


            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        // auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                Logs.Add(auditEntry.ToLog());
            }

            return SaveChangesAsync();
        }

      
    }




}

